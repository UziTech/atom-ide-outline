{"version":3,"file":"main.js","sources":["../src/outlineView.js","../src/statuses.js","../src/main.js","../src/providerRegistry.js"],"sourcesContent":["export class OutlineView {\r\n  constructor() {\r\n    this.element = document.createElement(\"div\");\r\n    this.element.classList.add(\"outline-view\");\r\n  }\r\n\r\n  destroy() {\r\n    this.element.remove();\r\n  }\r\n\r\n  getElement() {\r\n    return this.element;\r\n  }\r\n\r\n  getTitle() {\r\n    return \"Outline\";\r\n  }\r\n\r\n  setOutline({ tree: outlineTree, editor }) {\r\n    const outlineViewElement = this.getElement();\r\n    outlineViewElement.innerHTML = \"\";\r\n\r\n    const outlineRoot = document.createElement(\"ul\");\r\n    addOutlineEntries({\r\n      parent: outlineRoot,\r\n      entries: outlineTree,\r\n      editor,\r\n    });\r\n    outlineViewElement.append(outlineRoot);\r\n  }\r\n\r\n  clearOutline() {\r\n    const outlineViewElement = this.getElement();\r\n    outlineViewElement.innerHTML = \"\";\r\n  }\r\n\r\n  presentStatus(status) {\r\n    this.clearOutline();\r\n\r\n    const statusElement = status && generateStatusElement(status);\r\n\r\n    if (statusElement) {\r\n      const outlineViewElement = this.getElement();\r\n      outlineViewElement.append(statusElement);\r\n    }\r\n  }\r\n}\r\n\r\nfunction generateStatusElement(status) {\r\n  const element = document.createElement(\"div\");\r\n  element.className = \"status\";\r\n\r\n  const { title = \"\", description = \"\" } = status;\r\n  element.innerHTML = `<h1>${title}</h1>\r\n  <span>${description}</span>`;\r\n\r\n  return element;\r\n}\r\n\r\nfunction addOutlineEntries({ parent, entries, editor, level = 0 }) {\r\n  entries.forEach((item) => {\r\n    const symbol = document.createElement(\"li\");\r\n\r\n    // Hold an entry in a dedicated element to prevent hover conflicts - hover over an <li> tag would be cought by a parent <li>\r\n    const labelElement = document.createElement(\"span\");\r\n    labelElement.style.paddingLeft = `${10 * level}px`;\r\n    labelElement.innerText = item.representativeName || item.plainText;\r\n\r\n    const iconElement = getIcon(item?.icon, item?.kind);\r\n    labelElement.prepend(iconElement);\r\n\r\n    symbol.append(labelElement);\r\n\r\n    // Cursor reposition on click\r\n    symbol.addEventListener(\"click\", () => {\r\n      const editorPane = atom.workspace.paneForItem(editor);\r\n      editorPane.activate();\r\n\r\n      editor.cursors[0].setBufferPosition(item.startPosition, {\r\n        autoscroll: true,\r\n      });\r\n    });\r\n\r\n    const hasChildren = item.children && !!item.children[0];\r\n    if (hasChildren) {\r\n      const childrenList = document.createElement(\"ul\");\r\n      childrenList.addEventListener(\"click\", (event) =>\r\n        event.stopPropagation()\r\n      );\r\n\r\n      symbol.append(childrenList);\r\n      addOutlineEntries({\r\n        parent: childrenList,\r\n        entries: item.children,\r\n        editor,\r\n        level: level + 1,\r\n      });\r\n    }\r\n\r\n    parent.append(symbol);\r\n  });\r\n}\r\n\r\nfunction getIcon(iconType:? string, kindType:? string) {\r\n  // LSP specification: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_documentSymbol\r\n  // atom-languageclient mapping: https://github.com/atom/atom-languageclient/blob/485bb9d706b422456640c9070eee456ef2cf09c0/lib/adapters/outline-view-adapter.ts#L270\r\n\r\n  const iconElement = document.createElement(\"span\");\r\n  iconElement.classList.add(\"icon\")\r\n\r\n  // icon\r\n  const hasIconType = typeof iconType === \"string\" && iconType.length > 0;\r\n  if (hasIconType) {\r\n    iconElement.classList.add(iconType);\r\n  }\r\n\r\n  // kind\r\n  const hasKindType = typeof kindType === \"string\" && kindType.length > 0;\r\n  let type;\r\n  if (hasKindType) {\r\n    let kindClass;\r\n    if (kindType.indexOf(\"type-\") === 0) { // supplied with type-...\r\n      kindClass = `${kindType}`;\r\n      type = kindType.replace(\"type-\", \"\");\r\n    } else { // supplied without type-\r\n      kindClass = `type-${kindType}`;\r\n      type = kindType;\r\n    }\r\n    iconElement.classList.add(kindClass);\r\n  }\r\n\r\n  const iconSymbol = type ? type.substring(0, 1) : \"?\";\r\n  iconElement.innerHTML = `<span>${iconSymbol}</span>`;\r\n\r\n  return iconElement;\r\n}\r\n","export const statuses = {\n  noEditor: {\n    title: \"Outline is unavailable.\",\n    description: \"Open a text editor.\",\n  },\n  noProvider: {\n    title: \"Provider is unavailable\",\n    description:\n      \"Looks like a provider for this type of file is not available. Check if a relevant IDE language package is installed and has outline support, or try adding one from Atom's package registry (e.g.: ide-typescript, ide-rust, ide-css, ide-json).\",\n  },\n};\n","import { CompositeDisposable, TextEditor } from \"atom\";\nimport { OutlineView } from \"./outlineView\";\nimport { ProviderRegistry } from \"./providerRegistry\";\n\nexport { statuses } from \"./statuses\"; // for spec\nimport { statuses } from \"./statuses\";\n\nlet subscriptions: CompositeDisposable;\nlet activeEditorContentUpdateSubscription = null;\nlet view: OutlineView;\nexport let outlineProviderRegistry = new ProviderRegistry();\nlet busySignalProvider;\n\nexport function activate() {\n  subscriptions = new CompositeDisposable();\n  view = new OutlineView(); // create outline pane\n  addCommands();\n  addObservers();\n  if (atom.config.get(\"atom-ide-outline.InitialDisplay\")) {\n    toggleOutlineView(); // initially show outline pane    \n  }\n}\n\nexport function deactivate() {\n  subscriptions.dispose();\n  view.destroy();\n}\n\nexport function consumeSignal(registry) {\n  const provider = registry.create();\n\n  busySignalProvider = provider;\n  subscriptions.add(provider);\n}\n\nexport async function consumeOutlineProvider(provider) {\n  const providerRegistryEntry = outlineProviderRegistry.addProvider(provider);\n  subscriptions.add(providerRegistryEntry);\n\n  // Generate (try) an outline after obtaining a provider\n  await getOutline();\n}\n\nfunction addCommands() {\n  const outlineToggle = atom.commands.add(\"atom-workspace\", {\n    \"outline:toggle\": () => toggleOutlineView(),\n  });\n  subscriptions.add(outlineToggle);\n}\n\nfunction addObservers() {\n  const activeTextEditorObserver = atom.workspace.observeActiveTextEditor(\n    async (editor: TextEditor) => {\n      activeEditorContentUpdateSubscription?.dispose?.(); // dispose old content\n      await getOutline(editor); // initial outline\n      // changing of outline by changing the cursor\n      activeEditorContentUpdateSubscription = editor?.onDidChangeCursorPosition(\n        () => getOutline(editor)\n      );\n    }\n  );\n  subscriptions.add(activeTextEditorObserver);\n}\n\nexport function toggleOutlineView() {\n  const outlinePane = atom.workspace.paneForItem(view);\n  if (outlinePane) {\n    return outlinePane.destroyItem(view);\n  }\n\n  const rightDock = atom.workspace.getRightDock();\n  const [pane] = rightDock.getPanes();\n\n  pane.addItem(view);\n  pane.activateItem(view);\n\n  rightDock.show();\n}\n\nexport async function getOutline(activeEditor) {\n  // editor\n  const editor = activeEditor || atom.workspace.getActiveTextEditor();\n  if (!editor) {\n    return setStatus(\"noEditor\");\n  }\n\n  // provider\n  const provider = outlineProviderRegistry.getProvider(editor);\n\n  if (!provider) {\n    return setStatus(\"noProvider\");\n  }\n\n  const target = editor.getFileName();\n  busySignalProvider?.add(`Outline: ${target}`);\n\n  const outline = await provider.getOutline(editor);\n\n  view.setOutline({\n    tree: (outline && outline.outlineTrees) || [],\n    editor,\n  });\n\n  busySignalProvider?.clear();\n}\n\nexport function setStatus(id) {\n  const status = statuses[id];\n  view.presentStatus(status);\n}\n\nexport const config = {\n  InitialDisplay: {\n    title: \"Initial Outline Display\",\n    description: \"Show outline initially aftern atom loads\",\n    type: \"boolean\",\n    default: true,\n  },\n};\n","import { Disposable } from \"atom\";\n\nexport class ProviderRegistry {\n  constructor() {\n    this.providers = [];\n  }\n\n  addProvider(provider) {\n    this.providers.push(provider);\n\n    return new Disposable(() => this.removeProvider(provider));\n  }\n\n  removeProvider(provider) {\n    const indexInRegistry = this.providers.indexOf(provider);\n\n    if (indexInRegistry !== -1) {\n      this.providers.splice(indexInRegistry, 1);\n    }\n  }\n\n  getProvider(editor) {\n    const grammarScope = editor.getGrammar().scopeName;\n\n    return this.providers.find((provider) =>\n      provider.grammarScopes.includes(grammarScope)\n    );\n  }\n}\n"],"names":["OutlineView","constructor","element","document","createElement","classList","add","destroy","remove","getElement","this","getTitle","setOutline","tree","outlineTree","editor","outlineViewElement","innerHTML","outlineRoot","addOutlineEntries","parent","entries","level","forEach","item","symbol","labelElement","style","paddingLeft","innerText","representativeName","plainText","iconElement","iconType","kindType","length","type","kindClass","indexOf","replace","iconSymbol","substring","getIcon","icon","kind","prepend","append","addEventListener","atom","workspace","paneForItem","activate","cursors","setBufferPosition","startPosition","autoscroll","children","childrenList","event","stopPropagation","clearOutline","presentStatus","status","statusElement","className","title","description","generateStatusElement","statuses","noEditor","noProvider","subscriptions","view","busySignalProvider","activeEditorContentUpdateSubscription","outlineProviderRegistry","providers","addProvider","provider","push","Disposable","removeProvider","indexInRegistry","splice","getProvider","grammarScope","getGrammar","scopeName","find","grammarScopes","includes","toggleOutlineView","outlinePane","destroyItem","rightDock","getRightDock","pane","getPanes","addItem","activateItem","show","async","getOutline","activeEditor","getActiveTextEditor","setStatus","target","getFileName","outline","outlineTrees","clear","id","CompositeDisposable","outlineToggle","commands","addCommands","activeTextEditorObserver","observeActiveTextEditor","dispose","onDidChangeCursorPosition","addObservers","config","get","InitialDisplay","default","providerRegistryEntry","registry","create"],"mappings":"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"}